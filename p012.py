#

import os,logging
import time
import math
from prime import PrimeNumberPool

def factors(n):
    sn = int(math.sqrt(n))
    f = [1, n]
    for i in range(2, sn+1):
        if (n % i == 0):
            f.append(i)
            f.append(n/i)
    return f

def num_divisors(n, primes):
    factors = primes.Factorize(n)
    result = 1
    for f in factors:
        result *= f[1]+1
    return result

"""
def num_divisors(n):
    return len(factors(n))
""" 

def main(args):
    description = '''
    Highly divisible triangular number
    Problem 12 
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
    '''

    '''
    Analysis:
    the n-th triangle number is n*(n+1)/2

    '''

    primes = PrimeNumberPool()

    if args.test:
        break_cond = 5
    else:
        break_cond = 500

    n = 1
    while (True):
        n += 1
        tri = n*(n+1)//2
        ndiv = num_divisors(tri, primes)
        if ndiv > break_cond:
            solution = 'result:  {}'.format(tri)
            logging.info(solution)
            break

